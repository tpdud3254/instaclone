// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String?
  userName  String    @unique
  email     String    @unique
  password  String
  bio       String?
  avatar    String?
  followers User[]    @relation("FollowRelation")
  following User[]    @relation("FollowRelation")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  photos    Photo[]
  likes     Like[]
  comments  Comment[]
}

//photo     Photo[], user      User는 실제 데이터베이스에 저장되지 않음, 실제로 저장되는건 Photo의 userId임
//실제 database를 열어 보면 해당 항목은 보이지 않음. prisma가 안 보이는 곳에서 만들고 관리하는 항목들이기 떄문, prisma가 자동으로 관리하는 항목들
//이부분은 단지 prisma와 prisma client가 우리가 뭘하는지 알기 위해서 있는 거
model Photo {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  // 한명의 유저는 여러장의 photo를 가질 수 있음, 관계를 명시해주고 저장하면 그 뒤에는 자동완성 해줌
  file      String
  caption   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  hashtags  Hashtag[]
  hashtagId Int?
  likes     Like[]
  comments  Comment[]
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  photo     Photo    @relation(fields: [photoId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  photoId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //photoID, userID는 DB에 저장 되지만 photo, user는 아님. photo, user는 prisma만을 위해 만들어진 항목임

  @@unique([photoId, userId])
}

//unique가 필요한 이유? 유저가 똑같은 사진에 좋아요를 한 번 이상 못누르게 하기 위해서. userIddhk photoId는 중복될 수 없음 
//protected의 역할도 해줌. userId와 photoID가 중복되 경우 DB에 저장되지 않도록 해줌

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])
  payload   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  photoId   Int
}
